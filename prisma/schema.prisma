// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String           @id @default(cuid())
  name              String?
  email             String?          @unique
  emailVerified     DateTime?
  image             String?
  role              String           @default("client")
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  accounts          Account[]
  sessions          Session[]
  cargoOffers       CargoOffer[]
  aiAgents          AIAgent[]        @relation("CreatedAIAgents")
  fleets            Fleet[]          @relation("OwnedFleets")
  integrations      APIIntegration[] @relation("UserIntegrations")
  reviews           Review[]         @relation("UserReviews")
  apiConnections    AgentAPIConnection[] @relation("UserConnections")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum CargoStatus {
  NEW
  TAKEN
  IN_PROGRESS
  COMPLETED
  CANCELED
}

enum VehicleStatus {
  idle
  in_transit
  loading
  unloading
  maintenance
  assigned
  out_of_service
}

model AIAgent {
  id            String   @id @default(cuid())
  name          String
  description   String
  version       String
  category      String
  
  capabilities  Json
  configuration Json
  performance   Json
  
  marketplace   Boolean  @default(false)
  price         Float?
  rating        Float    @default(0)
  downloads     Int      @default(0)
  
  status        String   @default("active")
  isTemplate    Boolean  @default(false)
  requiresAPI   Json
  
  createdBy     User     @relation("CreatedAIAgents", fields: [userId], references: [id])
  userId        String
  
  reviews       Review[]
  metrics       AgentMetric[]
  apiConnections AgentAPIConnection[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([marketplace])
  @@index([category])
  @@index([isTemplate])
  @@map("ai_agents")
}

model Fleet {
  id        String    @id @default(cuid())
  name      String
  status    String    @default("active")
  vehicles  Vehicle[]
  routes    Route[]
  metrics   FleetMetric[]
  owner     User      @relation("OwnedFleets", fields: [userId], references: [id])
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([userId])
}

model Route {
  id          String   @id @default(cuid())
  name        String
  startPoint  Json
  endPoint    Json
  waypoints   Json?
  distance    Float?
  duration    Float?
  fuelCost    Float?
  tollCost    Float?
  status      String   @default("planned")
  fleet       Fleet     @relation(fields: [fleetId], references: [id])
  fleetId     String
  vehicle     Vehicle   @relation(fields: [vehicleId], references: [id])
  vehicleId   String
  cargoOfferId String?
  optimized   Boolean   @default(false)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index([fleetId])
  @@index([status])
}

model APIIntegration {
  id            String   @id @default(cuid())
  name          String
  type          String
  provider      String
  
  configuration Json
  credentials   Json
  endpoints     Json
  headers       Json?
  settings      Json?
  
  description   String?
  documentation String?
  status        String   @default("active")
  lastSync      DateTime?
  lastError     String?
  
  user          User      @relation("UserIntegrations", fields: [userId], references: [id])
  userId        String
  
  connectedAgents AgentAPIConnection[]
  
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt

  @@index([userId])
  @@index([type])
  @@index([provider])
}

model Review {
  id        String   @id @default(cuid())
  rating    Float
  comment   String?
  agent     AIAgent   @relation(fields: [agentId], references: [id])
  agentId   String
  user      User       @relation("UserReviews", fields: [userId], references: [id])
  userId    String
  createdAt DateTime  @default(now())

  @@index([agentId])
  @@index([rating])
}

model AgentMetric {
  id          String   @id @default(cuid())
  agentId     String
  performance Json
  usage       Json
  errors      Json?
  timestamp   DateTime @default(now())
  agent       AIAgent   @relation(fields: [agentId], references: [id])

  @@index([agentId])
  @@index([timestamp])
}

model FleetMetric {
  id        String   @id @default(cuid())
  fleetId   String
  metrics   Json
  timestamp DateTime @default(now())
  fleet     Fleet      @relation(fields: [fleetId], references: [id])

  @@index([fleetId])
  @@index([timestamp])
}

model Maintenance {
  id          String   @id @default(cuid())
  type        String
  description String?
  cost        Float?
  scheduledAt DateTime
  completedAt DateTime?
  status      String   @default("scheduled")
  vehicle     Vehicle    @relation(fields: [vehicleId], references: [id])
  vehicleId   String
  createdAt   DateTime  @default(now())

  @@index([vehicleId])
  @@index([status])
  @@index([scheduledAt])
}

model AgentAPIConnection {
  id              String         @id @default(cuid())
  agentId         String
  integrationId   String
  status          String         @default("active")
  lastUsed        DateTime?
  metrics         Json?
  agent           AIAgent        @relation(fields: [agentId], references: [id])
  integration     APIIntegration @relation(fields: [integrationId], references: [id])
  user            User           @relation("UserConnections", fields: [userId], references: [id])
  userId          String

  @@unique([agentId, integrationId])
}

model CargoOffer {
  id           String      @id @default(cuid())
  title        String
  fromLocation String?
  toLocation   String?
  fromAddress  String
  toAddress    String
  fromCountry  String
  toCountry    String
  distance     Float?
  weight       Float
  volume       Float?
  cargoType    String
  loadingDate  DateTime
  deliveryDate DateTime
  price        Float
  priceType    String
  companyName  String
  companyRating Float?
  requirements String[]
  vehicleType  String?
  status       CargoStatus @default(NEW)
  urgency      String
  userId       String
  user         User        @relation(fields: [userId], references: [id])
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  SystemAlert  SystemAlert[]

  @@index([status])
  @@index([userId])
}

model SystemAlert {
  id          String     @id @default(cuid())
  message     String
  type        String     @default("info")
  details     String?
  isProcessed Boolean    @default(false)
  read        Boolean    @default(false)
  createdAt   DateTime   @default(now())
  relatedId   String?
  cargoOffer  CargoOffer? @relation(fields: [relatedId], references: [id])
}

model Vehicle {
  id                    String    @id @default(cuid())
  name                  String
  type                  String
  licensePlate          String    @unique
  status                VehicleStatus @default(idle)
  driverName            String
  lat                   Float?
  lng                   Float?
  fuelConsumption       Float?    @default(30.0)
  fleet                 Fleet     @relation(fields: [fleetId], references: [id])
  fleetId               String
  routes                Route[]
  maintenances          Maintenance[]
  gpsLogs               GpsLog[]
  currentRouteId        String?
  
  // -- Câmpuri pentru Localizare Hibridă --
  locationType          VehicleLocationType @default(MANUAL_COORDS)
  manualLocationAddress String?
  gpsDeviceImei         String?             @unique

  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@index([fleetId])
  @@index([status])
}

model GpsLog {
  id        String   @id @default(cuid())
  lat       Float
  lng       Float
  speed     Float?
  timestamp DateTime @default(now())
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])
  vehicleId String

  @@index([vehicleId, timestamp])
}

model RealTimeMetric {
  id         String @id @default(cuid())
  metricType String
  value      Json
  timestamp  DateTime @default(now())
  
  @@index([metricType, timestamp])
}

enum VehicleLocationType {
  MANUAL_COORDS
  MANUAL_ADDRESS
  GPS_API
}