generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String               @id @default(cuid())
  name           String?
  email          String?              @unique
  emailVerified  DateTime?
  image          String?
  createdAt      DateTime             @default(now())
  updatedAt      DateTime             @updatedAt
  role           String               @default("client")
  integrations   APIIntegration[]     @relation("UserIntegrations")
  apiConnections AgentAPIConnection[] @relation("UserConnections")
  acceptedOffers CargoOffer[]         @relation("AcceptedOffers")
  cargoOffers    CargoOffer[]
  messagesSent   ChatMessage[]
  fleets         Fleet[]              @relation("OwnedFleets")
  OfferRequest   OfferRequest[]
  reviews        Review[]             @relation("UserReviews")
  aiAgents       AIAgent[]            @relation("CreatedAIAgents")
}

model AIAgent {
  id                   String    @id @default(cuid())
  name                 String
  description          String
  version              String
  category             String
  capabilities         Json
  configuration        Json
  performance          Json
  marketplace          Boolean              @default(false)
  price                Float?
  rating               Float                @default(0)
  downloads            Int                  @default(0)
  status               String               @default("active")
  isTemplate           Boolean              @default(false)
  requiresAPI          Json
  userId               String
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  layer                String?
  depth                Int?
  weight               Float?
  evolutionCycle       Int?
  evolutionStatus      String?
  lastEvolution        DateTime?
  modificationsCount   Int?
  successRate          Float?
  protocolCompliance   String?
  confidenceScore      Float?
  validationScore      Int?
  mcpCompatible        Boolean?
  apiConnections       AgentAPIConnection[]
  metrics              AgentMetric[]
  reviews              Review[]
  createdBy            User                 @relation("CreatedAIAgents", fields: [userId], references: [id])

  @@index([marketplace])
  @@index([category])
  @@index([isTemplate])
  @@map("ai_agents")
}

model Fleet {
  id        String        @id @default(cuid())
  name      String
  status    String        @default("active")
  userId    String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  owner     User          @relation("OwnedFleets", fields: [userId], references: [id])
  metrics   FleetMetric[]
  routes    Route[]
  vehicles  Vehicle[]

  @@index([userId])
}

model Route {
  id           String   @id @default(cuid())
  name         String
  startPoint   Json
  endPoint     Json
  waypoints    Json?
  distance     Float?
  duration     Float?
  fuelCost     Float?
  tollCost     Float?
  status       String   @default("planned")
  fleetId      String
  vehicleId    String
  optimized    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  cargoOfferId String?
  fleet        Fleet    @relation(fields: [fleetId], references: [id])
  vehicle      Vehicle  @relation(fields: [vehicleId], references: [id])

  @@index([fleetId])
  @@index([status])
}

model APIIntegration {
  id              String               @id @default(cuid())
  name            String
  type            String
  provider        String
  configuration   Json
  credentials     Json
  endpoints       Json
  headers         Json?
  settings        Json?
  description     String?
  documentation   String?
  status          String               @default("active")
  lastSync        DateTime?
  lastError       String?
  userId          String
  createdAt       DateTime             @default(now())
  updatedAt       DateTime             @updatedAt
  user            User                 @relation("UserIntegrations", fields: [userId], references: [id])
  connectedAgents AgentAPIConnection[]

  @@index([userId])
  @@index([type])
  @@index([provider])
}

model Review {
  id        String   @id @default(cuid())
  rating    Float
  comment   String?
  agentId   String
  userId    String
  createdAt DateTime @default(now())
  agent     AIAgent  @relation(fields: [agentId], references: [id])
  user      User     @relation("UserReviews", fields: [userId], references: [id])

  @@index([agentId])
  @@index([rating])
}

model AgentMetric {
  id          String   @id @default(cuid())
  agentId     String
  performance Json
  usage       Json
  errors      Json?
  timestamp   DateTime @default(now())
  agent       AIAgent  @relation(fields: [agentId], references: [id])

  @@index([agentId])
  @@index([timestamp])
}

model FleetMetric {
  id        String   @id @default(cuid())
  fleetId   String
  metrics   Json
  timestamp DateTime @default(now())
  fleet     Fleet    @relation(fields: [fleetId], references: [id])

  @@index([fleetId])
  @@index([timestamp])
}

model Maintenance {
  id          String    @id @default(cuid())
  type        String
  description String?
  cost        Float?
  scheduledAt DateTime
  completedAt DateTime?
  status      String    @default("scheduled")
  vehicleId   String
  createdAt   DateTime  @default(now())
  vehicle     Vehicle   @relation(fields: [vehicleId], references: [id])

  @@index([vehicleId])
  @@index([status])
  @@index([scheduledAt])
}

model AgentAPIConnection {
  id            String         @id @default(cuid())
  agentId       String
  integrationId String
  userId        String
  lastUsed      DateTime?
  metrics       Json?
  status        String         @default("active")
  agent         AIAgent        @relation(fields: [agentId], references: [id])
  integration   APIIntegration @relation(fields: [integrationId], references: [id])
  user          User           @relation("UserConnections", fields: [userId], references: [id])

  @@unique([agentId, integrationId])
}

model CargoOffer {
  id               String         @id @default(cuid())
  title            String
  weight           Float
  price            Float
  companyName      String?
  urgency          String
  createdAt        DateTime       @default(now())
  updatedAt        DateTime       @updatedAt
  userId           String
  deliveryDate     DateTime
  loadingDate      DateTime
  priceType        String
  requirements     String[]
  volume           Float?
  cargoType        String
  fromPostalCode   String?
  toPostalCode     String?
  fromAddress      String
  fromCountry      String
  toAddress        String
  toCountry        String
  status           CargoStatus    @default(NEW)
  acceptedByUserId String?
  companyRating    Float?
  distance         Float?
  fromLocation     String?
  toLocation       String?
  vehicleType      String?
  fromCity         String
  toCity           String
  acceptedAt       DateTime?
  acceptedBy       User?          @relation("AcceptedOffers", fields: [acceptedByUserId], references: [id])
  user             User           @relation(fields: [userId], references: [id])
  chatMessages     ChatMessage[]
  OfferRequest     OfferRequest[]
  SystemAlert      SystemAlert[]

  @@index([status])
  @@index([userId])
  @@index([status, createdAt])
  @@index([acceptedByUserId])
  @@index([createdAt])
  @@index([urgency])
  @@index([fromCountry])
  @@index([toCountry])
  @@index([weight])
  @@index([deliveryDate])
  @@index([status, userId])
  @@index([status, acceptedByUserId])
}

model ChatMessage {
  id           String     @id @default(cuid())
  content      String
  createdAt    DateTime   @default(now())
  cargoOfferId String
  senderId     String
  read         Boolean    @default(false)
  sender       User       @relation(fields: [senderId], references: [id], onDelete: Cascade)
  cargoOffer   CargoOffer @relation(fields: [cargoOfferId], references: [id], onDelete: Cascade)

  @@index([cargoOfferId])
  @@index([senderId])
  @@index([cargoOfferId, createdAt])
  @@index([createdAt])
}

model SystemAlert {
  id          String      @id @default(cuid())
  message     String
  type        String      @default("info")
  createdAt   DateTime    @default(now())
  isProcessed Boolean     @default(false)
  relatedId   String?
  read        Boolean     @default(false)
  details     String?
  cargoOffer  CargoOffer? @relation(fields: [relatedId], references: [id])

  @@index([type])
  @@index([createdAt])
  @@index([isProcessed])
  @@index([read])
  @@index([type, createdAt])
}

model Vehicle {
  id                    String              @id @default(cuid())
  licensePlate          String              @unique
  fleetId               String
  driverName            String
  lat                   Float?
  lng                   Float?
  name                  String
  type                  String
  status                VehicleStatus       @default(idle)
  fuelConsumption       Float?              @default(30.0)
  createdAt             DateTime            @default(now())
  currentRouteId        String?
  currentRoute          String?
  gpsDeviceImei         String?             @unique
  locationType          VehicleLocationType @default(MANUAL_COORDS)
  manualLocationAddress String?
  gpsProvider           String?
  gpsEnabled            Boolean             @default(false)
  updatedAt             DateTime            @updatedAt
  gpsLogs               GpsLog[]
  maintenances          Maintenance[]
  routes                Route[]
  fleet                 Fleet               @relation(fields: [fleetId], references: [id])

  @@index([fleetId])
  @@index([status])
  @@index([fleetId, status])
  @@index([type])
  @@index([createdAt])
  @@index([updatedAt])
}

model GpsLog {
  id        String   @id @default(cuid())
  lat       Float
  lng       Float
  timestamp DateTime @default(now())
  vehicleId String
  speed     Float?
  vehicle   Vehicle  @relation(fields: [vehicleId], references: [id])

  @@index([vehicleId, timestamp])
}

model RealTimeMetric {
  id         String   @id @default(cuid())
  timestamp  DateTime @default(now())
  metricType String
  value      Json

  @@index([metricType, timestamp])
}

model OfferRequest {
  id            String             @id @default(cuid())
  cargoOfferId  String
  transporterId String
  price         Float
  status        OfferRequestStatus @default(PENDING)
  createdAt     DateTime           @default(now())
  
  cargoOffer    CargoOffer         @relation(fields: [cargoOfferId], references: [id], onDelete: Cascade)
  transporter   User               @relation(fields: [transporterId], references: [id], onDelete: Cascade)

  @@unique([cargoOfferId, transporterId])
  @@index([cargoOfferId])
  @@index([transporterId])
}

model Assignment {
  id           String   @id @default(cuid())
  cargoOfferId String
  vehicleId    String
  userId       String
  status       String   @default("ACTIVE")
  assignedAt   DateTime @default(now())
  completedAt  DateTime?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([cargoOfferId])
  @@index([vehicleId])
  @@index([userId])
  @@index([status])
}

enum CargoStatus {
  NEW
  TAKEN
  IN_PROGRESS
  COMPLETED
  CANCELED
  OPEN
}

enum VehicleStatus {
  idle
  in_transit
  en_route
  loading
  unloading
  maintenance
  assigned
  out_of_service
}

enum VehicleLocationType {
  MANUAL_COORDS
  MANUAL_ADDRESS
  GPS_API
}

enum OfferRequestStatus {
  PENDING
  ACCEPTED
  REJECTED
}
