// Etapa 1: Calculele se schimba pentru a folosi noul Routes API
const simulationPromises = candidateVehicles.map(async (vehicle: Vehicle): Promise<SimulationResult | null> => {\n    const apiKey = process.env.NEXT_PUBLIC_GOOGLE_MAPS_API_KEY;\n    const url = 'https://routes.googleapis.com/directions/v2:computeRoutes';\n    \n    const requestBody = {\n        origin: { location: { latLng: { latitude: vehicle.lat, longitude: vehicle.lng } } },\n        destination: { address: cargoOffer.toAddress },\n        intermediates: [{ address: cargoOffer.fromAddress }],\n        travelMode: 'DRIVE',\n        extraComputations: ['TOLLS'],\n        // Adaugam detalii despre vehicul pentru un calcul mai precis al taxelor\n        routeModifiers: {\n            vehicleInfo: {\n                emissionType: 'GASOLINE', // Poate fi ajustat sau preluat din DB in viitor\n            }\n        }\n    };\n\n    try {\n        const response = await fetch(url, {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json',\n                'X-Goog-Api-Key': apiKey!,\n                'X-Goog-FieldMask': 'routes.distanceMeters,routes.duration,routes.travelAdvisory.tollInfo'\n            },\n            body: JSON.stringify(requestBody)\n        });\n\n        const data = await response.json();\n\n        if (!data.routes || data.routes.length === 0) {\n          console.error(\"Google Routes API did not return any routes.\", data);\n          return null;\n        }\n\n        const route = data.routes[0];\n        const totalDistance = route.distanceMeters;\n        const totalDuration = parseInt(route.duration.slice(0, -1)); // '3600s' -> 3600\n        const tollCost = parseFloat(route.travelAdvisory?.tollInfo?.estimatedPrice[0]?.units || '0');\n\n        // Calcul cost combustibil\n        const distanceInKm = totalDistance / 1000;\n        const fuelNeeded = (distanceInKm * (vehicle.fuelConsumption || 10)) / 100;\n        const fuelCost = fuelNeeded * FUEL_PRICE_PER_LITER;\n\n        const totalCost = fuelCost + tollCost;\n        const profit = cargoOffer.price - totalCost;\n\n        return { vehicle, distance: totalDistance, duration: totalDuration, cost: totalCost, profit };\n    } catch (error) {\n        console.error('Error fetching from Google Routes API:', error);\n        return null;\n    }\n});\n\nconst simulationResults = (await Promise.all(simulationPromises)).filter(Boolean) as SimulationResult[]; 